EmployeeManagement-(Angular and Java)
Step 1:
	Goto Spring initialiazer:
	Add 
	1. Spring Web
	2. Mysql Driver
	3. Jpa
	4. Dev Tools
	Then Generate
Step 2: Setup Database
	Open workbench 
	crete database employee_mangement;
Step 3: Setup Configuration/ Connection of the Database from Java 

	Goto applivation.properties

		Add:
			spring.datasource.url=jdbc:mysql://localhost:3306/employee_mangement?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
			spring.datasource.username=
			spring.datasource.password=
			#Hiberante
			spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

			#Hibernate auto ddl
			spring.jpa.hibernate.ddl-auto=update
			logging.level.org.hibernate.SQL = DEBUG

Step 4: Create a Package named: 
	1. Model/Entity
	2. Controller
	3. Repository
	4. Exception/ error handler

Step 5: Create Employee Class inside the Model Package
	1. Create getter and setter
	2. Create Constructor; 1 no Id and Bodyless
	3. String 

Step 5: Create EmployeeRepository Interface inside the Repository Package
	extends to JPARepository<AddtheClassHere, DatatypeofId>
	and add @Repository Annotations

Creating Employee REST API
Step 1: Create ResourceNotFoundException Class inside the Exception Package
	extends to RunTimeException

	//Code
	@ResponseStatus(value = HttpStatus.NOT_FOUND)
	public class ResourceNotFoundException extends RuntimeException {
  	  private static final long serialVersionUID = 1L;
   	  public ResourceNotFoundException(String message){
           super(message);
   		 }
	}


Step 2: Create EmployeeController Class inside the Controller Package

	//Code

	@RestController -> Annotation 
	@RequestMapping("/employee/list/") -> url root
	public class EmployeeController {
 	   @Autowired -> importing EmployeeRepository
  	   private EmployeeRepository employeeRepository;

 	   //get all employee list
 	   @GetMapping("/employees") -> extension Url
  	   public List<Employee> getAllEmployee(){ -> listing all data
  	      return employeeRepository.findAll();
 	   }

}
Step 3: Goto Workbench and Insert data to database
Step 4: TEST IT!!!!

Angular - Front End

Step 1: Install node.js , npm and angular

 	in angular : 
	Open Cmd and use the command 
	  npm install -g @angular/cli
Step 2: Open Vs code
 	Terminal and
	ng new employee-frontend

Step 3: TEST IT!!
	cd employee-frontend
	ng serve

Add bootstrap in angular app

Step 1: Cd employee-fronntend
	npm i bootstrap
	and add to style.css
	//code
	@import "~bootstrap/dist/css/bootstrap.min.css"
Step 2: Testing if boostrap is working
	Goto app -> app.component.html
	delete all content
	
	add:
<h1 class="text-center">{{title}}</h1> -> {{}} = called interpolation


Creating Angular Employee List Component

Step 1: Make sure you are in your App
	//Hold reponse of REST API thats why we create it
	Creating Typescript Class: ng g class employee
	it will created 2 files located in the app folder:
	1.) CREATE src/app/employee.spec.ts (162 bytes)
	2.) CREATE src/app/employee.ts (26 bytes)

Step 2: goto employee.ts to define some properties
       
    it should match in the employee class in the java(backend)
    
    //example
    "id": number;
    "firstName": string;
    "lastName": string;
    "emailAddress": string;
    "address": string; 

Step 3: Creating Angular Employee List Component
 	Command: ng g c employee-list
	
	it will created 1 folder and 4 files inside app folder:
	Folder: employee-list
	Files: 
	   1. employee-list.component.html (28 bytes)        
	   2. employee-list.component.spec.ts (642 bytes)    
           3. employee-list.component.ts (302 bytes)
	   4. employee-list.component.css (0 bytes)






	