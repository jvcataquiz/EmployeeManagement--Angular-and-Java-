EmployeeManagement-(Angular and Java)
Step 1:
	Goto Spring initialiazer:
	Add 
	1. Spring Web
	2. Mysql Driver
	3. Jpa
	4. Dev Tools
	Then Generate
Step 2: Setup Database
	Open workbench 
	crete database employee_mangement;
Step 3: Setup Configuration/ Connection of the Database from Java 

	Goto applivation.properties

		Add:
			spring.datasource.url=jdbc:mysql://localhost:3306/employee_mangement?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
			spring.datasource.username=
			spring.datasource.password=
			#Hiberante
			spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

			#Hibernate auto ddl
			spring.jpa.hibernate.ddl-auto=update
			logging.level.org.hibernate.SQL = DEBUG

Step 4: Create a Package named: 
	1. Model/Entity
	2. Controller
	3. Repository
	4. Exception/ error handler

Step 5: Create Employee Class inside the Model Package
	1. Create getter and setter
	2. Create Constructor; 1 no Id and Bodyless
	3. String 

Step 5: Create EmployeeRepository Interface inside the Repository Package
	extends to JPARepository<AddtheClassHere, DatatypeofId>
	and add @Repository Annotations

Creating Employee REST API
Step 1: Create ResourceNotFoundException Class inside the Exception Package
	extends to RunTimeException

	//Code
	@ResponseStatus(value = HttpStatus.NOT_FOUND)
	public class ResourceNotFoundException extends RuntimeException {
  	  private static final long serialVersionUID = 1L;
   	  public ResourceNotFoundException(String message){
           super(message);
   		 }
	}


Step 2: Create EmployeeController Class inside the Controller Package

	//Code

	@RestController -> Annotation 
	@RequestMapping("/employee/list/") -> url root
	public class EmployeeController {
 	   @Autowired -> importing EmployeeRepository
  	   private EmployeeRepository employeeRepository;

 	   //get all employee list
 	   @GetMapping("/employees") -> extension Url
  	   public List<Employee> getAllEmployee(){ -> listing all data
  	      return employeeRepository.findAll();
 	   }

}
Step 3: Goto Workbench and Insert data to database
Step 4: TEST IT!!!!

Angular - Front End

Step 1: Install node.js , npm and angular

 	in angular : 
	Open Cmd and use the command 
	  npm install -g @angular/cli
Step 2: Open Vs code
 	Terminal and
	ng new employee-frontend

Step 3: TEST IT!!
	cd employee-frontend
	ng serve

Add bootstrap in angular app

Step 1: Cd employee-fronntend
	npm i bootstrap
	and add to style.css
	//code
	@import "~bootstrap/dist/css/bootstrap.min.css"
Step 2: Testing if boostrap is working
	Goto app -> app.component.html
	delete all content
	
	add:
<h1 class="text-center">{{title}}</h1> -> {{}} = called interpolation


Creating Angular Employee List Component

Step 1: Make sure you are in your App
	//Hold reponse of REST API thats why we create it
	Creating Typescript Class: ng g class employee
	it will created 2 files located in the app folder:
	1.) CREATE src/app/employee.spec.ts (162 bytes)
	2.) CREATE src/app/employee.ts (26 bytes)

Step 2: goto employee.ts to define some properties
       
    it should match in the employee class in the java(backend)
    
    //example
    "id": number;
    "firstName": string;
    "lastName": string;
    "emailAddress": string;
    "address": string; 

Step 3: Creating Angular Employee List Component
 	Command: ng g c employee-list
	
	it will created 1 folder and 4 files inside app folder:
	Folder: employee-list
	Files: 
	   1. employee-list.component.html (28 bytes)        
	   2. employee-list.component.spec.ts (642 bytes)    
           3. employee-list.component.ts (302 bytes)
	   4. employee-list.component.css (0 bytes)
Step 3: Test it 
	Copy the selector inside employee-list.component.ts
	and paste it in app.component.html

	//example
	<app-employee-list></app-employee-list>
	it will print the content of the employee-list.component.html

Step 4: Edit employee-list.component.html
	Create a table to dispaly all the employee records in the database
	//Code
	<table class="table">
    <thead>
      <tr>
       
        <th scope="col">First Name</th>
        <th scope="col">Last Name</th>
        <th scope="col">Email Address</th>
        <th scope="col">Address</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor = "let employee of employees">  ----> employees Same here
        <td>{{employee.firtName}}</td>
        <td>{{employee.lastName}}</td>
        <td>{{employee.emailAddress}}</td>
        <td>{{employee.address}}</td>
      </tr>
    </tbody>
  </table>

Step 5: go to employee-list.component.ts to create a handler for the API
	Inside the OnInit method add:
	//code
	employees: Employee[] | undefined;  ----> employees Same here

Step 6: continuios of step 5
	got to void method and add:
	object to employees to test if working
	//Example
	 this.employees =[{
      		"id": 1,
    	        "firstName": "Joshua",
       	        "lastName": "Dela Crus",
    	        "emailAddress": "joshuadelacrus@gmail.com",
    	        "address": "Manila City"
    }];

Connecting Angular with Rest Api[employee list]

Step 1: Create A Service: Employee Service
	Command: ng g s employee
	it will create a two files:
	1. employee.service.ts
	2. employee.service.spec.ts

Step 2: Go to app.module.ts
	inside the 'imports:' object
	add :  
		HttpClientModule
	and:
		import {HttpClientModule} from '@angular/common/http'

Step 3: Goto employee.service.ts to inject HttpClient
	add parameter in the constructor:
	   private httpClient: HttpClient

	and imports:
	    import { HttpClient } from '@angular/common/http';

	create a base Url above the constructor:
	  private baseUrl ="http://localhost:8080/employee_management/list/employees";

Step 4: Continue of step 3
	Create a method:
	//Code
		getEmployeeList(): Observable<Employee[]>{
   		 return this.httpClient.get<Employee[]>(`${this.baseUrl}`);
  		}
	import the obeservable:
		import {Observable} from 'rxjs';


Step 5: inject it to employee-list.component.ts

	add parameter to the constructor:
		private employeeService: EmployeeService
	and import  EmployeeService
Step 6: Delete / Comment out the fake object we created and create a method
	//Code
	 private displayAllEmployeeList(){
 	   this.employeeService.getEmployeeList().subscribe(data =>{
   	   this.employees = data;
   	 })
 	 }
	and inside the ngonInit void() call the method we created:
		this.displayAllEmployeeList();
	
Step 7: test it !
	if the value is not displaying 
 	try to right click the browser and check the console
	if the error is 
	Blocked by CROS policy: No 'access-control-allow-Origin
	Goto the backend and to Controller and add this code in the top of the RequestController Anotation
	@CrossOrigin(origins = "http://localhost:4200")
	Restart the Backend and Test it again

Create Routing and navigation in Front-end

Manual routing
Step 1:  Open Index.html
	required base tag
	<base  htref="/">

Step 2: Create app-routing.module.ts

	//Code to add
	import { NgModule } from '@angular/core';
	import { RouterModule, Routes } from '@angular/router';

	const routes: Routes = [];

	@NgModule({
 	 imports: [RouterModule.forRoot(routes)],
 	 exports: [RouterModule]
	})
	export class AppRoutingModule { }

Step 3: Goto the app.module.ts 
	 you need to import AppRoutingModule inside imports array

//Start adding routes
Step 4: Configure in app-routing.module.ts to add routes (javascript objects)
	inside the Routes Empty array add:
	 {path: 'employees', component: EmployeeListComponent}
	//for specific understanding 
	{path: 'urlpathyouwant', component: Componentyouwanttodisplayinthespecificroute}

Step 5: continue step 4 redirect path from "/" to "employees"
	 {path: '', redirectTo:'employees', pathMatch: 'full'}


Step 6: Configure router outlet directive (goto app.component.html)

	replace <app-employee-list></app-employee-list> with:
	    <router-outlet></router-outlet>
	to load and update the template dynamically


Navigation 
Step 1: Add Navigation Bar Using Bootstrap in app.component.html
	add routerLink = "urlpath/employees" to the anchor tag
	and also add routerLinkActive="active" -> to specify what router is active


Create Rest Api/ insert api to databse
//Backend Part

Step 1: Create a handler to the Backend
	//Code 
	 @PostMapping("/employees") -> Handler
  	  public Employee createEmployee(@RequestBody Employee employee){ 
   	 return employeeRepository.save(employee); -> save to the jpa repo
   	 }

Step 2: Test it to Post Man
	get the Url and change to Post
	-> body ->raw -> Json
	create a data/json file you want to insert


Creating Angular Create Employee Component (Front-End)


Step 1: To create create employee 
	//Command
	   ng g c create-employee

Step 2: Create a route in the app-routing.module.ts
	add : {path: 'create-employee', component: CreateEmployeeComponent}

Step 3: Go to app.component.html and add anchor tag to add a navigation route

	//Example
	          <a class="nav-link"  routerLink="create-employee" routerLinkActive="active" href="#">Add Employee</a>


Create Form to handle Create-Employee
Step 1: Open create-employee.component.ts
	add an object:
	employee: Employee = new Employee(); and import Employee Class
		
Step 2: Create a Form in create-employee.component.html
	//How to Create form in angular

	<form (ngSubmit) = "onSubmit()"> -> eventlisntener create in create-employee.component.ts
        <div class="form-group">
            <label> First Name</label>
            <input type="text" class ="form-control" id = "firstName"
                [(ngModel)] = "employee.firstName" name = "firstName"> -> [(ngModel)] = "employee.firstName" use for binding form to Employee Class
        </div>
	</form>
Step 3: you need to Import  [(ngModel)] 
	Go to App.module.ts and import
	import { FormsModule } from '@angular/forms';
	and add FormsModule to imports array

	check the browser!

Step 4: Goto create-employee.component.ts
	 Create onSubmit() method
	//add console.log(this.employee) for testing

Connecting Angular Form Data to add it to the Database(Backend)-> rest Api
Step 1: Create a method inside the employee.service.ts for the insert/create
	//Code
	createEmployee(employee: Employee): Observable<Object>{ Object-> if you dont know the data type// or generally
   	 return this.httpClient.post(`${this.baseUrl}`, employee);
  	}

Step 2: Go to create-employee.component.ts to create/call the method createEmployee()
	add :
	private employeeService: EmployeeService,
         private router: Router
	inside the constructor and import the EmployeeService
	private router: Router -> for redirecting purpose

Step 3: create another method saveEmployee()
	//Code
	saveEmployee(){
 	   this.employeeService.createEmployee(this.employee).subscribe( data =>{
   	   console.log(data);
   	   this.goToEmployeeList();
   	 },
   	 error => console.log(error));
  	}
	and for the routing goToEmployeeList();
	//Code
	goToEmployeeList(){
  	  this.router.navigate(['/employees']);
  	}

	lastly, Call the saveEmployee method to onsubmit()
		
	or

	add only this code inside the onSubmit() mehtod 
	//code
	 this.employeeService.createEmployee(this.employee).subscribe( data =>{
      	 console.log(data);
      	 this.router.navigate(['/employees']); -> redirect after the inserting process
   	 },
  	  error => console.log(error));
  	}
Step 4: Test it!!!
